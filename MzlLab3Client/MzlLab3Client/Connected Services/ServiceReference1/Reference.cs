//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MzlLab3Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movie", Namespace="http://schemas.datacontract.org/2004/07/ObjectsManager.Model")]
    [System.SerializableAttribute()]
    public partial class Movie : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseYear {
            get {
                return this.ReleaseYearField;
            }
            set {
                if ((this.ReleaseYearField.Equals(value) != true)) {
                    this.ReleaseYearField = value;
                    this.RaisePropertyChanged("ReleaseYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/ObjectsManager.Model")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/ObjectsManager.Model")]
    [System.SerializableAttribute()]
    public partial class Review : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MzlLab3Client.ServiceReference1.Person AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MovieIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MzlLab3Client.ServiceReference1.Person Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MovieId {
            get {
                return this.MovieIdField;
            }
            set {
                if ((this.MovieIdField.Equals(value) != true)) {
                    this.MovieIdField = value;
                    this.RaisePropertyChanged("MovieId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IObjectsService")]
    public interface IObjectsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddMovie", ReplyAction="http://tempuri.org/IObjectsService/AddMovieResponse")]
        int AddMovie(MzlLab3Client.ServiceReference1.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddMovie", ReplyAction="http://tempuri.org/IObjectsService/AddMovieResponse")]
        System.Threading.Tasks.Task<int> AddMovieAsync(MzlLab3Client.ServiceReference1.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetMovie", ReplyAction="http://tempuri.org/IObjectsService/GetMovieResponse")]
        MzlLab3Client.ServiceReference1.Movie GetMovie(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetMovie", ReplyAction="http://tempuri.org/IObjectsService/GetMovieResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Movie> GetMovieAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllMovies", ReplyAction="http://tempuri.org/IObjectsService/GetAllMoviesResponse")]
        MzlLab3Client.ServiceReference1.Movie[] GetAllMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllMovies", ReplyAction="http://tempuri.org/IObjectsService/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Movie[]> GetAllMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdateMovie", ReplyAction="http://tempuri.org/IObjectsService/UpdateMovieResponse")]
        MzlLab3Client.ServiceReference1.Movie UpdateMovie(MzlLab3Client.ServiceReference1.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdateMovie", ReplyAction="http://tempuri.org/IObjectsService/UpdateMovieResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Movie> UpdateMovieAsync(MzlLab3Client.ServiceReference1.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeleteMovie", ReplyAction="http://tempuri.org/IObjectsService/DeleteMovieResponse")]
        bool DeleteMovie(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeleteMovie", ReplyAction="http://tempuri.org/IObjectsService/DeleteMovieResponse")]
        System.Threading.Tasks.Task<bool> DeleteMovieAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddPerson", ReplyAction="http://tempuri.org/IObjectsService/AddPersonResponse")]
        int AddPerson(MzlLab3Client.ServiceReference1.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddPerson", ReplyAction="http://tempuri.org/IObjectsService/AddPersonResponse")]
        System.Threading.Tasks.Task<int> AddPersonAsync(MzlLab3Client.ServiceReference1.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetPerson", ReplyAction="http://tempuri.org/IObjectsService/GetPersonResponse")]
        MzlLab3Client.ServiceReference1.Person GetPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetPerson", ReplyAction="http://tempuri.org/IObjectsService/GetPersonResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Person> GetPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllPersons", ReplyAction="http://tempuri.org/IObjectsService/GetAllPersonsResponse")]
        MzlLab3Client.ServiceReference1.Person[] GetAllPersons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllPersons", ReplyAction="http://tempuri.org/IObjectsService/GetAllPersonsResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Person[]> GetAllPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdatePerson", ReplyAction="http://tempuri.org/IObjectsService/UpdatePersonResponse")]
        MzlLab3Client.ServiceReference1.Person UpdatePerson(MzlLab3Client.ServiceReference1.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdatePerson", ReplyAction="http://tempuri.org/IObjectsService/UpdatePersonResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Person> UpdatePersonAsync(MzlLab3Client.ServiceReference1.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeletePerson", ReplyAction="http://tempuri.org/IObjectsService/DeletePersonResponse")]
        bool DeletePerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeletePerson", ReplyAction="http://tempuri.org/IObjectsService/DeletePersonResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddReview", ReplyAction="http://tempuri.org/IObjectsService/AddReviewResponse")]
        int AddReview(MzlLab3Client.ServiceReference1.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddReview", ReplyAction="http://tempuri.org/IObjectsService/AddReviewResponse")]
        System.Threading.Tasks.Task<int> AddReviewAsync(MzlLab3Client.ServiceReference1.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetReview", ReplyAction="http://tempuri.org/IObjectsService/GetReviewResponse")]
        MzlLab3Client.ServiceReference1.Review GetReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetReview", ReplyAction="http://tempuri.org/IObjectsService/GetReviewResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review> GetReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllReviews", ReplyAction="http://tempuri.org/IObjectsService/GetAllReviewsResponse")]
        MzlLab3Client.ServiceReference1.Review[] GetAllReviews(MzlLab3Client.ServiceReference1.Person p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllReviews", ReplyAction="http://tempuri.org/IObjectsService/GetAllReviewsResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review[]> GetAllReviewsAsync(MzlLab3Client.ServiceReference1.Person p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllReviewsForMovie", ReplyAction="http://tempuri.org/IObjectsService/GetAllReviewsForMovieResponse")]
        MzlLab3Client.ServiceReference1.Review[] GetAllReviewsForMovie(MzlLab3Client.ServiceReference1.Movie m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllReviewsForMovie", ReplyAction="http://tempuri.org/IObjectsService/GetAllReviewsForMovieResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review[]> GetAllReviewsForMovieAsync(MzlLab3Client.ServiceReference1.Movie m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdateReview", ReplyAction="http://tempuri.org/IObjectsService/UpdateReviewResponse")]
        MzlLab3Client.ServiceReference1.Review UpdateReview(MzlLab3Client.ServiceReference1.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdateReview", ReplyAction="http://tempuri.org/IObjectsService/UpdateReviewResponse")]
        System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review> UpdateReviewAsync(MzlLab3Client.ServiceReference1.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeleteReview", ReplyAction="http://tempuri.org/IObjectsService/DeleteReviewResponse")]
        bool DeleteReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeleteReview", ReplyAction="http://tempuri.org/IObjectsService/DeleteReviewResponse")]
        System.Threading.Tasks.Task<bool> DeleteReviewAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IObjectsServiceChannel : MzlLab3Client.ServiceReference1.IObjectsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObjectsServiceClient : System.ServiceModel.ClientBase<MzlLab3Client.ServiceReference1.IObjectsService>, MzlLab3Client.ServiceReference1.IObjectsService {
        
        public ObjectsServiceClient() {
        }
        
        public ObjectsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ObjectsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObjectsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObjectsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddMovie(MzlLab3Client.ServiceReference1.Movie movie) {
            return base.Channel.AddMovie(movie);
        }
        
        public System.Threading.Tasks.Task<int> AddMovieAsync(MzlLab3Client.ServiceReference1.Movie movie) {
            return base.Channel.AddMovieAsync(movie);
        }
        
        public MzlLab3Client.ServiceReference1.Movie GetMovie(int id) {
            return base.Channel.GetMovie(id);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Movie> GetMovieAsync(int id) {
            return base.Channel.GetMovieAsync(id);
        }
        
        public MzlLab3Client.ServiceReference1.Movie[] GetAllMovies() {
            return base.Channel.GetAllMovies();
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Movie[]> GetAllMoviesAsync() {
            return base.Channel.GetAllMoviesAsync();
        }
        
        public MzlLab3Client.ServiceReference1.Movie UpdateMovie(MzlLab3Client.ServiceReference1.Movie movie) {
            return base.Channel.UpdateMovie(movie);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Movie> UpdateMovieAsync(MzlLab3Client.ServiceReference1.Movie movie) {
            return base.Channel.UpdateMovieAsync(movie);
        }
        
        public bool DeleteMovie(int id) {
            return base.Channel.DeleteMovie(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMovieAsync(int id) {
            return base.Channel.DeleteMovieAsync(id);
        }
        
        public int AddPerson(MzlLab3Client.ServiceReference1.Person person) {
            return base.Channel.AddPerson(person);
        }
        
        public System.Threading.Tasks.Task<int> AddPersonAsync(MzlLab3Client.ServiceReference1.Person person) {
            return base.Channel.AddPersonAsync(person);
        }
        
        public MzlLab3Client.ServiceReference1.Person GetPerson(int id) {
            return base.Channel.GetPerson(id);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Person> GetPersonAsync(int id) {
            return base.Channel.GetPersonAsync(id);
        }
        
        public MzlLab3Client.ServiceReference1.Person[] GetAllPersons() {
            return base.Channel.GetAllPersons();
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Person[]> GetAllPersonsAsync() {
            return base.Channel.GetAllPersonsAsync();
        }
        
        public MzlLab3Client.ServiceReference1.Person UpdatePerson(MzlLab3Client.ServiceReference1.Person person) {
            return base.Channel.UpdatePerson(person);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Person> UpdatePersonAsync(MzlLab3Client.ServiceReference1.Person person) {
            return base.Channel.UpdatePersonAsync(person);
        }
        
        public bool DeletePerson(int id) {
            return base.Channel.DeletePerson(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonAsync(int id) {
            return base.Channel.DeletePersonAsync(id);
        }
        
        public int AddReview(MzlLab3Client.ServiceReference1.Review review) {
            return base.Channel.AddReview(review);
        }
        
        public System.Threading.Tasks.Task<int> AddReviewAsync(MzlLab3Client.ServiceReference1.Review review) {
            return base.Channel.AddReviewAsync(review);
        }
        
        public MzlLab3Client.ServiceReference1.Review GetReview(int id) {
            return base.Channel.GetReview(id);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review> GetReviewAsync(int id) {
            return base.Channel.GetReviewAsync(id);
        }
        
        public MzlLab3Client.ServiceReference1.Review[] GetAllReviews(MzlLab3Client.ServiceReference1.Person p) {
            return base.Channel.GetAllReviews(p);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review[]> GetAllReviewsAsync(MzlLab3Client.ServiceReference1.Person p) {
            return base.Channel.GetAllReviewsAsync(p);
        }
        
        public MzlLab3Client.ServiceReference1.Review[] GetAllReviewsForMovie(MzlLab3Client.ServiceReference1.Movie m) {
            return base.Channel.GetAllReviewsForMovie(m);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review[]> GetAllReviewsForMovieAsync(MzlLab3Client.ServiceReference1.Movie m) {
            return base.Channel.GetAllReviewsForMovieAsync(m);
        }
        
        public MzlLab3Client.ServiceReference1.Review UpdateReview(MzlLab3Client.ServiceReference1.Review review) {
            return base.Channel.UpdateReview(review);
        }
        
        public System.Threading.Tasks.Task<MzlLab3Client.ServiceReference1.Review> UpdateReviewAsync(MzlLab3Client.ServiceReference1.Review review) {
            return base.Channel.UpdateReviewAsync(review);
        }
        
        public bool DeleteReview(int id) {
            return base.Channel.DeleteReview(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteReviewAsync(int id) {
            return base.Channel.DeleteReviewAsync(id);
        }
    }
}
